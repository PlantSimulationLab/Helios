option(ENABLE_OPENMP "Enable building with OpenMP" OFF)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if ( WIN32 )
    string(REGEX REPLACE "/MD*" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD*" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/W[0-4]" "/W1" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/W[0-4]" "/W1" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    cmake_policy(SET CMP0091 NEW)
    set( CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}" )
        set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/lib" )
        set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/lib" )
    endforeach(OUTPUTCONFIG)
endif()
cmake_policy(SET CMP0079 NEW)
set(CMAKE_WARN_DEPRECATED OFF CACHE BOOL "" FORCE)

if(NOT DEFINED CMAKE_SUPPRESS_DEVELOPER_WARNINGS)
    set(CMAKE_SUPPRESS_DEVELOPER_WARNINGS 1 CACHE INTERNAL "No dev warnings")
endif()
set( EXECUTABLE_NAME ${EXECUTABLE_NAME} )
set( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}" CACHE STRING "" )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib" CACHE STRING "" )
add_executable( ${EXECUTABLE_NAME} ${SOURCE_FILES} )
add_subdirectory( "${BASE_DIRECTORY}/core" "lib" )
target_link_libraries( ${EXECUTABLE_NAME} helios)
if(APPLE) #get rid of annoying duplicate library warning on Mac
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-no_warn_duplicate_libraries")
endif()
LIST(LENGTH PLUGINS PLUGIN_COUNT)
message("-- Loading ${PLUGIN_COUNT} plug-ins")
foreach(PLUGIN ${PLUGINS})
    message("-- loading plug-in ${PLUGIN}")
    if( ${PLUGIN} STREQUAL ${EXECUTABLE_NAME} )
        message( FATAL_ERROR "The executable name cannot be the same as a plugin name. Please rename your executable." )
    endif()
    add_subdirectory( "${BASE_DIRECTORY}/plugins/${PLUGIN}" "${PROJECT_BINARY_DIR}/plugins/${PLUGIN}" )
    target_link_libraries( ${EXECUTABLE_NAME} ${PLUGIN} )
    if( NOT APPLE )
        target_link_libraries( ${PLUGIN} helios )
    endif()
endforeach(PLUGIN)
include_directories( "${PLUGIN_INCLUDE_PATHS};${CMAKE_CURRENT_SOURCE_DIRECTORY}" )

if( CMAKE_BUILD_TYPE STREQUAL Debug OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" )
    target_compile_definitions(helios PRIVATE HELIOS_DEBUG)
endif()

if( ENABLE_OPENMP )
    find_package(OpenMP)
    if (OpenMP_CXX_FOUND)
        message( "-- Enabling experimental OpenMP support" )
        target_link_libraries(helios PUBLIC OpenMP::OpenMP_CXX)
        target_compile_definitions(helios PUBLIC USE_OPENMP)
    else()
        if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
            message(WARNING "You are using Apple Clang compiler, which does not support OpenMP. The program will compile without OpenMP support.")
        else()
            message(WARNING "OpenMP not found! The program will compile without OpenMP support.")
        endif()
    endif()
endif()

enable_testing()
add_test(NAME Test0 COMMAND ${EXECUTABLE_NAME} 0)