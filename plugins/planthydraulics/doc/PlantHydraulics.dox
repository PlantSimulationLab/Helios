/*! \page PlantHydraulicsDoc Plant Hydraulics Model Plugin Documentation

 \tableofcontents

 <table>
 <tr><th>Dependencies</th><td>None</td></tr>
 <tr><th>CMakeLists.txt</th><td>set( PLUGINS "planthydraulics" )</td></tr>
 <tr><th>Header File</th><td>#include "PlantHydraulicsModel.h"</td></tr>
 <tr><th>Class</th><td>\ref PlantHydraulicsModel</td></tr>
 </table>

 \section PlantHydraulicsConstructor Class Constructor

 <table>
 <tr><th>Constructors</th></tr>
 <tr><td>\ref PlantHydraulicsModel( helios::Context* )</td></tr>
 </table>


\section PH_PrimData Primitive Data

| Primitive Data Label | Symbol | Units | Data Type | Description | Available Plugins | Default Value |
| -------------------- | ------ | ------ | --------- | ----------- | ------------------ | ------------- |
| temperature          | \f$T_s\f$  | Kelvin | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly    | Primitive surface temperature | Can be computed by \ref EnergyBalanceModel plugin | 300 K |
| latent_flux          | \f$E\f$    | W/mÂ² | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly | Latent heat flux (transpiration) | Can be computed by \ref EnergyBalanceModel plugin | 0 |

| Object Data Label | Symbol | Units | Data Type | Description | Available Plugins | Default Value |
| -------------------- | ------ | ------ | --------- | ----------- | ------------------ | ------------- |
| plantID              | N/A    | N/A | \htmlonly<font color="green"><tt>int</tt></font>\endhtmlonly | Unique plant identification number | Can be generated by \ref PlantArchitecture plugin | N/A |

\subsection PH_OutputData Default Output Primitive Data

| Primitive Data Label | Symbol | Units | Data Type | Description |
| -------------------- | ------ | ------ | --------- | ----------- |
| water_potential      | \f$\psi\f$   | MPa | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly    | Water potential |
| relative_water_content | \f$w\f$    | unitless | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly | Relative water content |
| turgor_pressure      | \f$p\f$      | MPa | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly | Cellular turgor pressure   |
| osmotic_potential    | \f$\pi\f$    | MPa | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly | Cellular osmotic potential |

\subsection PH_OptionalOutputData Optional Output Primitive Data

| Primitive Data Label | Symbol | Units | Data Type | Description |
| -------------------- | ------ | ------ | --------- | ----------- |
| hydraulic_conductance  | \f$K\f$   | mol m\f$^{-2}\f$ s\f$^{-1}\f$ MPa\f$^{-1}\f$ | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly    | Hydraulic conductance |
| hydraulic_capacitance | \f$C\f$    | mol m\f$^{-2}\f$ MPa\f$^{-1}\f$ | \htmlonly<font color="green"><tt>float</tt></font>\endhtmlonly | Hydraulic capacitance |

\section PHissues Known Issues
Currently, steady-state mode is functional and non-steady-state mode is under construction.

\section PH_Intro Introduction
The Plant Hydraulics plugin models the water potentials, water contents, hydraulic conductances, and
hydraulic capacitances within and between leaves, stems, roots, and soil. The plugin operates on a
group of leaf primitives and treats stems and roots each as single compartments associated with those
leaf primitives, with soil water potential as environmental input. Leaf water potential, turgor pressure,
and osmotic potential are then computed uniquely for each leaf primitive according to it's transpiration,
temperature primitive data and hydraulic model parameters. Leaves are grouped using parent object data with the label
 "plantID" that can be set here or generated by other plugins, such as the Plant Architecture plugin.

\section PH_Equations Governing Equations
Plant transpiration, \f$E_{plant}\f$ (W m\f$^{-2}\f$), is first obtained through aggregating \f$n\f$ individual leaf transpiration fluxes,
weighted by leaf area \f$a\f$ (m\f$^2\f$) as
\f[
E_{plant} = \frac{1}{a_{plant}}\sum_{i=1}^n E_i a_i.
\f]
Then, stem and root water potentials,
\f$\psi_{stem}\f$ and \f$\psi_{root}\f$ (MPa), are solved for given \f$E_{plant}\f$ and soil water potential, \f$\psi_{soil}\f$, using
\f[
C(\psi_{root})\frac{d\psi_{root}}{dt} = K_{root}(\psi_{root}-\psi_{soil}) - K_{stem}(\psi_{stem}-\psi_{root})
\f]
\f[
C(\psi_{stem})\frac{d\psi_{stem}}{dt} = K_{stem}(\psi_{stem}-\psi_{root}) - E_{plant},
\f]
where \f$C(\psi)\f$ and \f$K(\psi)\f$ are hydraulic capacitance and conductance, respectively, that depend on the
current water status. When a timespan is specified, a backward Euler scheme is implemented to implicitly solve
the equations with  \f$C(\psi)\f$ and \f$K(\psi)\f$ at the next timestep. When a timespan is not specified,
steady-state water potential is solved for with \f$\frac{d\psi}{dt}=0\f$ as

\f[
\psi_{root} = \psi_{soil} - \frac{E_{plant}}{K_{root}}
\f]
\f[
\psi_{stem} = \psi_{root} - \frac{E_{plant}}{K_{stem}}.
\f]

Each compartment (leaf, stem, and root) has a parameterized hydraulic conductance \f$K(\psi)\f$ and capacitance \f$C(\psi)\f$.
Conductance is modeled as a symmetric sigmoid of the form
\f[
K(\psi) = K_{max}\left(1+\left|\frac{\psi}{\psi_{50}}\right|^s\right)^{-1},
\f]
where \f$K_{max}\f$ is the maximal conductance, \f$\psi_{50}\f$ is the water
potential giving half of \f$K_{max}\f$, and \f$s\f$ controls the steepness. An optional temperature dependence is also
available and adjust conductance as \f$K(\psi,T) = K(\psi) \cdot \left(\frac{T}{298.15}\right)^7\f$.

The slope of the leaf pressure--volume relation defines the hydraulic capacitance, \f$C(\psi) = \frac{\partial w}{\partial \psi} W_{sat} \f$.
Water potential (\f$\psi\f$, MPa) as function of relative water content (\f$w\f$, unitless) is given by the addition of component
potentials, turgor pressure (\f$p\f$, MPa) and osmotic potential (\f$\pi\f$, MPa),

\f[
\psi(w)=p(w)+\pi(w) = -\pi_o \max\left(0,\frac{w-w_{tlp}}{1-w_{tlp}}\right)^\epsilon
 - \frac{\pi_o}{w},
\f]


where turgor pressure is parameterized by a saturated turgor pressure equal to saturated osmotic pressure \f$-\pi_o\f$ at \f$w=1\f$,
the relative water content at the turgor loss point, \f$w_{tlp}\f$ and an empirical compartmental wall elasticity,
\f$\epsilon\f$ ([Sack et al. 2018](https://doi.org/10.1104/pp.17.01097)). Osmotic potential is given by the saturated osmotic pressure
divided by relative water content, \f$\frac{-\pi_o}{w}\f$.

Currently osmotic potential at full turgor is given as a single parameter but it can be estimated or updated by the user using a
relation parameterized by the moles of osmotica per area, \f$n_o\f$, and the saturated specific water content
\f$W_{sat}\f$, which together with \f$w\f$ comprise the osmotic concentration \f$c = \frac{n_o \rho_w}{wW_{sat}\mu_w}\f$ in
the van 't Hoff relationship \f$\pi = -icRT\f$
with an \f$i=1\f$ given the molar mass, \f$\mu_w\f$ and density, \f$\rho_w\f$ of water, and a conversion from Pa to MPa, \f$\Upsilon\f$,
\f[
    \pi_o = \frac{n_o RT}{W_{sat}}\frac{\rho_w \Upsilon}{\mu_w}.
\f]

\section PH_Params Parameters
Conductance parameters
| Parameter   | Description                                                             | Units | Default Value |
| ----------- | ----------------------------------------------------------------------- | ----- | ----- |
| \f$K_{max}\f$   | maximum hydraulic conductance of leaf, stem, or root                | mol m\f$^{-2}\f$ s\f$^{-1}\f$ MPa\f$^{-1}\f$ |  0.5  |
| \f$\psi_{50}\f$ | water potential at which conductance is half of its maximum         | MPa |  N/A  |
| \f$s\f$         | steepness of conductance change with water potential around \f$\psi_{50}\f$ | unitless | N/A |

\image html images/HydraulicConductanceFits.png
(Data from [Hernandez-Santana et al. 2016](https://doi.org/10.1093/treephys/tpv146)).

Capacitance parameters
| Parameter  | Description                                                                                   | Units | Default Value |
| ---------- | --------------------------------------------------------------------------------------------- | ----- | ----- |
| \f$\pi_o\f$    | osmotic potential at full turgor                                                          | MPa |  -2.0  |
| \f$w_{tlp}\f$  | relative water content at turgor loss point                                               | unitless |  0.8  |
| \f$\epsilon\f$ | empirical cell wall elasticity coefficient                                                | unitless |  1.0  |
| \f$W_{sat}\f$  | specific water content at \f$w=1\f$                                                       | mol m\f$^{-2}\f$ |  1.0  |

Constants
| Parameter  | Description                                                                                   | Units | Value |
| ---------- | --------------------------------------------------------------------------------------------- | ----- | ----- |
| \f$R\f$        | gas constant                                                                              | J mol\f$^{-1}\f$ K\f$^{-1}\f$ | 8.314 |
| \f$\mu_w\f$    | molar mass of water                                                                       | g mol\f$^{-1}\f$ | 18.01 |
| \f$\rho_w\f$   | density of water                                                                          | g m\f$^{-3}\f$ | 10\f$^{-6}\f$ |
| \f$\Upsilon\f$ | Pa to MPa                                                                                 | MPa Pa\f$^{-1}\f$ | 10\f$^{-6}\f$ |

\image html images/PressureVolumeCurveFits.png

\section PH_Example Examples

A minimal working example is given below. A parameter library is used for leaf capacitance, and default generic values for
all other parameters, as shown in the tables above.

Note that the examples below use the plant architecture plugin. Be sure to add this plug-in in your project CMakeLists.txt file.

\code{.cpp}
#include "PlantHydraulicsModel.h"
#include "PlantArchitecture.h"
using namespace helios;

int main() {
    Context context;

    PlantArchitecture pa(&context);
    pa.loadPlantModelFromLibrary("pistachio");
    pa.optionalOutputObjectData("plantID"); // Important setting to output plantID
    pa.buildPlantInstanceFromLibrary(vec3(0,0,0),200);
    std::vector<uint> leaves = pa.getAllLeafUUIDs();

    PlantHydraulicsModel hydraulics(&context);
    PlantHydraulicsModelCoefficients phmc;

    phmc.setLeafHydraulicCapacitanceFromLibrary("pistachio");
    hydraulics.setModelCoefficients(phmc);

    int plantID = hydraulics.getPlantID(leaves);
    float soil_water_potential = -0.05; //MPa

    hydraulics.setSoilWaterPotentialOfPlant(plantID,soil_water_potential);
    hydraulics.run(leaves);

    // Query the point-wise water potentials throughout the system
    for( int i=0; i<leaves.size(); i++ ) {
        uint leafUUID = leaves.at(i);
        float psi_soil = hydraulics.getSoilWaterPotential(leafUUID);
        float psi_root = hydraulics.getRootWaterPotential(leafUUID);
        float psi_stem = hydraulics.getStemWaterPotential(leafUUID);
        std::cout << "Leaf UUID: " << leafUUID
                  << ", Soil Water Potential: " << psi_soil
                  << ", Root Water Potential: " << psi_root
                  << ", Stem Water Potential: " << psi_stem
                  << std::endl;
    }
}
\endcode


Parameters for conductances, and capacitances are set using respective data structures and examples of setting leaf, stem, and root
compartment hydraulics as either variable or constant is demonstrated below.

\code{.cpp}
#include "PlantHydraulicsModel.h"
#include "PlantArchitecture.h"
using namespace helios;

int main() {
    Context context;

    PlantArchitecture pa(&context);
    pa.loadPlantModelFromLibrary("pistachio");
    pa.optionalOutputObjectData("plantID");
    pa.buildPlantInstanceFromLibrary(vec3(0,0,0),200);
    std::vector<uint> leaves = pa.getAllLeafUUIDs();

    PlantHydraulicsModel hydraulics(&context);
    PlantHydraulicsModelCoefficients phmc;

    float Kl_max = 0.05; // maximum conductance of leaf (MPa)
    float Ks = 0.5; // constant conductance of stem (MPa)
    float Kr = 0.5; // constant conductance of root (MPa)

    float psi50 = -1.5; // water potential at which conductance is reduced by half (MPa)
    float sensitivity = 2.0; // how steep the reduction in conductance via water potential is (-)

    phmc.setLeafHydraulicConductance(Kl_max,psi50,sensitivity); // set conductance as a function of water potential
    phmc.setLeafHydraulicConductanceTemperatureDependence(true); // set conductance as a function of temperature
    phmc.setStemHydraulicConductance(Ks); // set a constant conductance
    phmc.setRootHydraulicConductance(Kr); // set a constant conductance

    float pi_o = -2.0; // osmotic potential at full turgor (MPa)
    float w_tlp = 0.8; // relative water content (-)
    float elasticity = 1.0; // cell wall elasticity exponent (-)
    float Cs = 0.5; // constant capacitance (mol/m2/MPa)
    float Cr = 0.5; // constant capacitance (mol/m2/MPa)

    phmc.setLeafHydraulicCapacitance(pi_o,w_tlp,elasticity); // set a variable capacitance (PV curve relationship)
    phmc.setStemHydraulicCapacitance(Cs); // set a constant capacitance
    phmc.setRootHydraulicCapacitance(Cr); // set a constant capacitance
    hydraulics.setModelCoefficients(phmc); // set model coefficients

    // Toggle optional primitive data outputs for conductance and capacitance
    hydraulics.outputConductancePrimitiveData(true);
    hydraulics.outputCapacitancePrimitiveData(true);

    int plantID = hydraulics.getPlantID(leaves);
    float soil_water_potential = -0.05; // (MPa)

    hydraulics.setSoilWaterPotentialOfPlant(plantID,soil_water_potential);
    hydraulics.run(leaves);

    // Query the point-wise water potentials throughout the system
    for( int i=0; i<leaves.size(); i++ ) {
        uint leafUUID = leaves.at(i);
        float psi_soil = hydraulics.getSoilWaterPotential(leafUUID);
        float psi_root = hydraulics.getRootWaterPotential(leafUUID);
        float psi_stem = hydraulics.getStemWaterPotential(leafUUID);
        std::cout << "Leaf UUID: " << leafUUID
                  << ", Soil Water Potential: " << psi_soil
                  << ", Root Water Potential: " << psi_root
                  << ", Stem Water Potential: " << psi_stem
                  << std::endl;
    }
}
\endcode
*/