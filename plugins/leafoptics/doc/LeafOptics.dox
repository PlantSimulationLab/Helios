/*! \page LeafOpticsDoc Leaf Optics Plugin Documentation

\tableofcontents

<p> <br><br> </p>

<table>
 <tr><th>Dependencies</th><td>None</td></tr>
 <tr><th>CMakeLists.txt</th><td>set( PLUGINS "leafoptics" )</td></tr>
 <tr><th>Header File</th><td>#include "LeafOptics.h"</td></tr>
 <tr><th>Class</th><td>\ref LeafOptics</td></tr>
</table>

\section LOIntro Introduction

This plug-in computes leaf spectral reflectance and transmittance using the
PROSPECT family of models.  The implementation follows the <a href="https://doi.org/10.1016/j.rse.2017.08.004">PROSPECT--PRO</a>
formulation with eight absorbing constituents and a structural parameter
\f$N\f$ that represents the number of elementary layers in the leaf.  Output
spectra cover the range 400--2500&nbsp;nm in 1&nbsp;nm steps.

For each wavelength \f$\lambda\f$ the absorption coefficient of a single layer
is calculated as
\f[ k(\lambda)=\frac{C_{ab}a_{ab}(\lambda)+C_{ar}a_{ar}(\lambda)+C_{an}a_{an}(\lambda)+C_{br}a_{br}(\lambda)
+C_{w}a_{w}(\lambda)+C_{m}a_{m}(\lambda)+C_{p}a_{p}(\lambda)+C_{c}a_{c}(\lambda)}{N}, \f]
where the \f$C\f$ variables are the constituent masses per area and the
\f$a(\lambda)\f$ terms are the specific absorption coefficients loaded from the
internal spectral library.  Fresnel equations are used to compute surface
reflectance and a radiative transfer solution gives the total leaf
reflectance and transmittance.

\section LOConstructor LeafOptics Class Constructor

<table>
 <tr><th>Constructors</th></tr>
 <tr><td>\ref LeafOptics::LeafOptics( helios::Context* context )</td></tr>
</table>

The constructor simply stores a pointer to the Helios context and loads the
spectral library data required by the model.

\section LOProps LeafOpticsProperties Structure

The \ref LeafOpticsProperties structure stores the biochemical inputs to the
model.

<table>
 <tr><th>Member</th><th>Units</th><th>Description</th><th>Default Value</th></tr>
 <tr><td>numberlayers</td><td>unitless</td><td>Leaf structure parameter \f$N\f$</td><td>1.5</td></tr>
 <tr><td>brownpigments</td><td>unitless</td><td>Mass of brown pigments</td><td>0</td></tr>
 <tr><td>chlorophyllcontent</td><td>\f$\mu\f$g&nbsp;cm\f$^{-2}\f$</td><td>Total chlorophyll</td><td>30</td></tr>
 <tr><td>carotenoidcontent</td><td>\f$\mu\f$g&nbsp;cm\f$^{-2}\f$</td><td>Total carotenoids</td><td>7</td></tr>
 <tr><td>anthocyancontent</td><td>\f$\mu\f$g&nbsp;cm\f$^{-2}\f$</td><td>Anthocyanins</td><td>1</td></tr>
 <tr><td>watermass</td><td>g&nbsp;cm\f$^{-2}\f$</td><td>Equivalent water thickness</td><td>0.015</td></tr>
 <tr><td>drymass</td><td>g&nbsp;cm\f$^{-2}\f$</td><td>Dry matter mass</td><td>0.09</td></tr>
 <tr><td>protein</td><td>g&nbsp;cm\f$^{-2}\f$</td><td>Protein mass</td><td>0</td></tr>
 <tr><td>carbonconstituents</td><td>g&nbsp;cm\f$^{-2}\f$</td><td>Cellulose and other carbon compounds</td><td>0</td></tr>
</table>

\section LOUse Using the LeafOptics Plug-in

The model can be run to produce global spectra and, optionally, assign those
spectra and optical properties to a set of primitives.

~~~~~~{.cpp}
#include "LeafOptics.h"

Context context;
LeafOptics leafoptics( &context );

LeafOpticsProperties props;
props.chlorophyllcontent = 40.0f;
props.watermass = 0.02f;

std::vector<uint> leafIDs = ...; //UUIDs for leaf primitives
leafoptics.run( leafIDs, props, "example" );
~~~~~~

This command creates global data labeled
"leaf_reflectivity_example" and "leaf_transmissivity_example" containing the
computed spectra.  The spectra labels are also stored as primitive data for the
specified UUIDs together with the biochemical property values.

\section LORetrieve Retrieving PROSPECT Parameters from Spectra

The LeafOptics class maintains an internal mapping between spectrum labels and the PROSPECT parameters used to generate them. This allows users to retrieve the original model parameters from primitives that have been assigned LeafOptics-generated spectra.

\subsection LORetrieveBasic Basic Usage

The \ref LeafOptics::getPropertiesFromSpectrum() method queries primitives for their "reflectivity_spectrum" primitive data and, if it matches a spectrum generated by the LeafOptics instance, assigns the corresponding PROSPECT parameters as primitive data:

~~~~~~{.cpp}
Context context;
LeafOptics leafoptics( &context );

// Generate spectra for different leaf types
LeafOpticsProperties healthy_leaf;
healthy_leaf.chlorophyllcontent = 45.0f;
healthy_leaf.carotenoidcontent = 12.0f;

LeafOpticsProperties stressed_leaf;
stressed_leaf.chlorophyllcontent = 20.0f;
stressed_leaf.brownpigments = 0.3f;

std::vector<uint> healthy_IDs = ...; // Some primitives
std::vector<uint> stressed_IDs = ...; // Other primitives

leafoptics.run( healthy_IDs, healthy_leaf, "healthy" );
leafoptics.run( stressed_IDs, stressed_leaf, "stressed" );

// Later, retrieve parameters from primitives based on their assigned spectra
std::vector<uint> all_leaves;
all_leaves.insert( all_leaves.end(), healthy_IDs.begin(), healthy_IDs.end() );
all_leaves.insert( all_leaves.end(), stressed_IDs.begin(), stressed_IDs.end() );

leafoptics.getPropertiesFromSpectrum( all_leaves );

// Each primitive now has parameter data matching its assigned spectrum
float chl;
context.getPrimitiveData( healthy_IDs[0], "chlorophyll", chl );
// chl = 45.0 (from healthy_leaf parameters)

context.getPrimitiveData( stressed_IDs[0], "chlorophyll", chl );
// chl = 20.0 (from stressed_leaf parameters)
~~~~~~

\subsection LORetrieveBehavior Method Behavior

For each UUID passed to \ref LeafOptics::getPropertiesFromSpectrum():

1. The method queries the primitive data "reflectivity_spectrum"
2. If the spectrum label starts with "leaf_reflectivity_", it extracts the user-provided label
3. If that label matches a spectrum generated by this LeafOptics instance, the corresponding parameters are assigned as primitive data
4. Primitives without matching spectra are silently skipped (no error is thrown)

\subsection LORetrieveLabels Assigned Primitive Data Labels

The method assigns primitive data using the same labels as \ref LeafOptics::setProperties():

<table>
 <tr><th>Primitive Data Label</th><th>Parameter</th><th>Condition</th></tr>
 <tr><td>"chlorophyll"</td><td>chlorophyllcontent</td><td>Always</td></tr>
 <tr><td>"carotenoid"</td><td>carotenoidcontent</td><td>Always</td></tr>
 <tr><td>"anthocyanin"</td><td>anthocyancontent</td><td>Always</td></tr>
 <tr><td>"brown"</td><td>brownpigments</td><td>If brownpigments > 0</td></tr>
 <tr><td>"water"</td><td>watermass</td><td>Always</td></tr>
 <tr><td>"drymass"</td><td>drymass</td><td>If drymass > 0 (PROSPECT-D mode)</td></tr>
 <tr><td>"protein"</td><td>protein</td><td>If drymass = 0 (PROSPECT-PRO mode)</td></tr>
 <tr><td>"cellulose"</td><td>carbonconstituents</td><td>If drymass = 0 (PROSPECT-PRO mode)</td></tr>
</table>

\subsection LORetrieveNotes Important Notes

- The parameter mapping is stored per LeafOptics instance. If you create a new LeafOptics object, it will not have access to spectra generated by a previous instance.
- Only spectra generated using the \ref LeafOptics::run() methods are tracked. Manually created global data with "leaf_reflectivity_" prefixes will not match.
- The method always overwrites existing primitive data for the parameters listed above.
- Both overloads are available: \ref LeafOptics::getPropertiesFromSpectrum(const std::vector<uint>&) for multiple primitives and \ref LeafOptics::getPropertiesFromSpectrum(uint) for a single primitive.

*/