/*! \page "WeberPennDoc" Weber-Penn Tree Plugin Documentation

 \image html AlmondOrchard.png

 \tableofcontents

 <p> <br><br> </p>

 <table>
 <tr><th>Dependencies</th><td>None.</td></tr>
 <tr><th>CMakeLists.txt</th><td>set( PLUGINS "weberpenntree" )</td></tr>
 <tr><th>Header File</th><td>#include "WeberPennTree.h"</td></tr>
 <tr><th>Class</th><td>\ref WeberPennTree</td></tr>
 </table>

 \section WPTissues Known Issues

 - The following parameters described in Weber and Penn (1995) are not implemented: nCurveBack, Flare. 

 \section WPTreeIntro Introduction
 
 This plugin implements the Weber-Penn 3D procedural tree generation model, which generates a 3D leaf- and branch-resolved model of a tree.  Click <a href="http://dl.acm.org/citation.cfm?id=218427">here</a> for the publication describing the model.  The method has many different parameters that can be adjusted to create arbitrary tree architectures.  The plugin adds geometric primitives to the Helios context that defines the geometry of the generated tree.

 \section WPTConstructor WeberPennTree Class Constructor

 <table>
 <tr><th>Constructors</th></tr>
 <tr><td>\ref WeberPennTree::WeberPennTree( helios::Context* context) "WeberPennTree( helios::Context* context)"</td></tr>
 </table>

 The \ref WeberPennTree class is initialized by simply passing a pointer to the Helios context as an argument to the constructor. This gives the class the ability to automatically add geometry to the context.

 \section WPTreeUse Using the Weber-Penn Tree Plug-in

 \subsection WPTLibrary The XML Tree Library File

 The parameters that define various tree geometries are specified in an XML file, which is loaded by the plug-in. When the WeberPennTree constructor is called, the defalut tree library is loaded. A list of trees in the default library is listed in the table below. Default tree parameters can be modified by the user, or custom tree libraries can be added, which is detailed in Section \ref WPTCustom. An example tree definition is given below. The tree definition is encapsulated by the \<WeberPennTree label="..."\>...\</WeberPennTree\> tag, where label gives a handle used to reference that specific tree geometry. Other tags define various parameters that determine the structure of the tree, which are detailed in the sections below.

 <!-- convert Pistachio.jpeg -crop 320x360+290+225 foo.jpeg -->
 
 <table>
 <tr><th>Tree type</th><th>Sample Image</th></tr>
 <tr><td>Almond</td><td>\image html "images/Almond.jpeg"</td></tr>
 <tr><td>Apple</td><td>\image html "images/Apple.jpeg"</td></tr>
 <tr><td>Avocado</td><td>\image html "images/Avocado.jpeg"</td></tr>
 <tr><td>Lemon</td><td>\image html "images/Lemon.jpeg"</td></tr>
 <tr><td>Olive</td><td>\image html "images/Olive.jpeg"</td></tr>
 <tr><td>Orange</td><td>\image html "images/Orange.jpeg"</td></tr>
 <tr><td>Peach</td><td>\image html "images/Peach.jpeg"</td></tr>
 <tr><td>Pistachio</td><td>\image html "images/Pistachio.jpeg"</td></tr>
 <tr><td>Walnut</td><td>\image html "images/Walnut.jpeg"</td></tr>
 </table>

 <p><p><p>
 
 ```
  <?xml version=1.0?>

  <helios>

    <WeberPennTree label="Almond">
      <Shape> 3 </Shape>
      <BaseSize> 0.2 </BaseSize>
      <BaseSplits> 2 </BaseSplits>
      <BaseSplitSize> 0.2 </BaseSplitSize>
      <Scale> 6 </Scale>
      <ScaleV> 1 </ScaleV>
      <ZScale> 1 </ZScale>
      <ZScaleV> 0 </ZScaleV>
      <Ratio> 0.02 </Ratio>
      <RatioPower> 1.3 </RatioPower>
      <Lobes> 5 </Lobes>
      <LobeDepth> 0.1 </LobeDepth>
      <Flare> 0.25 </Flare>
      <Levels> 3 </Levels>
      <nSegSplits> 0 0 0 0 </nSegSplits>
      <nSplitAngle> 40 10 10 0 </nSplitAngle>
      <nSplitAngleV> 0 0 0 0 </nSplitAngleV>
      <nCurveRes> 8 5 3 1 </nCurveRes>
      <nCurve> -60 -40 10 </nCurve>
      <nCurveV> 0 0 0 0 </nCurveV>
      <nCurveBack> 0 -70 0 0 </nCurveBack>
      <nLength> 1 0.6 0.4 0.3 </nLength>
      <nLengthV> 0 0 0 0 </nLengthV>
      <nTaper> 1 1 1 1 </nTaper>
      <nDownAngle> 0 50 30 0 </nDownAngle>
      <nDownAngleV> 0 0 0 0 </nDownAngleV>
      <nRotate> 95 95 95 95 </nRotate>
      <nRotateV> 0 10 10 0 </nRotateV>
      <nBranches> 0 50 30 20 </nBranches>
      <Leaves> 16 </Leaves>
      <LeafFile> plugins/weberpenntree/leaves/AlmondLeaf.png </LeafFile>
      <LeafScale> 0.2 </LeafScale>
      <LeafScaleX> 0.3 </LeafScaleX>
      <WoodFile> plugins/visualizer/textures/wood2.jpg </WoodFile>
    </WeberPennTree>

  </helios>
 ```

 \subsection WPTadd Adding Trees from the Tree Library

 The WeberPennTree member function \ref WeberPennTree::buildTree() is used to add and instance of a tree from the library. This function takes two required arguments in addition to one optional argument. The user must specify 1) the label for the tree as defined in the tree library XML file (see above), and 2) the (x,y,z) position to place the tree (note that this position is with respect to the base of the trunk). A third optional argument specifies a scaling factor to apply to the tree, where scale<1 makes the tree smaller, and scale>1 makes the tree bigger. The \ref buildTree function returns a uint that gives an identifier for the particular instance of the tree. This can be used later to reference the tree.

 The tree building process involves adding primitives to the Helios context that comprise a particular tree geometry. The UUIDs for the primitives that comprise trees can be queried via the functions \ref getTrunkUUIDs(), \ref getBranchUUIDs(), and \ref getLeafUUIDs() along with the identifier of the tree.

 <table>
 <tr><th>Tree Building Functions</th></tr>
 <tr><td>\ref WeberPennTree::buildTree(	const char* treename, helios::vec3 origin ) "uint buildTree(	const char* treename, helios::vec3 origin )"</td></tr>
 <tr><td>\ref WeberPennTree::buildTree(	const char* treename, helios::vec3 origin, float scale ) "uint buildTree( const char* treename, helios::vec3 origin, float scale )"</td></tr>
 </table>

 ```
  #include "Context.h"
  #include "WeberPennTree.h"

  int main(){
      Context context; //declare the context

      //create an instance of the WeberPennTree class, which we will call "weberpenntree"
      WeberPennTree weberpenntree( &context );
      
      //Create an almond tree at the point (0,0,0)
      uint ID_almond = weberpenntree.buildTree( "Almond", make_vec3(0,0,0) );

      //Create an orange tree at the point (10,0,0)
      uint ID_orange = weberpenntree.buildTree( "Orange", make_vec3(10,0,0) );

      //Retrieve UUIDs for context primitives making up the almond tree's leaves
      std::vector<uint> leafUUIDs_almond = weberpenntree.getLeafUUIDs( ID_almond );
  }
 ```
 
 \subsection WPTCustom Custom Tree Library Files

 User-specified XML tree library files can be utilized via the \ref WeberPennTree::loadXML() function. The argument to this function is an absolute or relative path to the XML file to be loaded. Note that as always relative file paths are relative to the project's build directory.

 \section WPTreeXML Creating Custom XML Files
 
 \subsection WPTOverview General Overview

 \image html images/Sketch_RLevels.jpeg

 The general idea behind the tree geometries is by specifying parameters that define the growth pattern of recursive branching levels (see figure above).  The base structure of the tree is the trunk, which is the 0th recursive level.  Braches are considered "children" of their "parent", which in this case is the trunk.  The first branching level is dependent on the size and orientation of the trunk.  Further levels of recursion are created by generating branches that are children of the previous branching level.  Each branching level follows the same set of rules but has different parameters that define the way they grow.  The number of recursion levels is given by the parameter <b>Levels</b>.  Importantly, the last level of recursion always corresponds to leaves, which follows the same general rules as branches.  So setting Levels = 3 would give a trunk, two branching levels, plus leaves.

 Many parameter names are prepended with the letter "n", which indicates that these parameters vary with recursion level.  For example, the parameter <b>Scale</b> is a scaling factor applied to the whole tree, and thus it does not depend on the recursion level.  The parameter <b>nBraches</b> gives the maximum number of branches <b>for each recursion level</b> (note the "n" in the name), and therefore can have a different value for each recursion level.  Below, each recursion level will be referred to by replacing "n" by the level number (e.g., 0Branches, 1Branches, 2Branches, etc.).

 Many parameter names are appended with the letter "V", which indicates that the parameter indicates a random range over which a value varies.  For example, if Scale = 10 and ScaleV = 1, the scale factor would randomly vary between 9 and 11.  Setting ScaleV to 0 would mean that there is no variation and the scale factor is always 10.

 \subsection WPTreeShape Trunk and general tree shape

 \image html "images/Sketch_0Trunk.jpeg"

 <table>
 <caption>Parameters related to the trunk and overall tree shape.</caption>
 <tr><th>Parameter</th><th>Description</th></tr>
 <tr><td>Scale</td><td>Scaling factor to specify overall tree size.  Scale is generally the height of the tree.</td></tr>
 <tr><td>0Length</td><td>Length of the tree trunk as a fraction of scale.  Usually, 0Length is set to 1 (i.e., 100%).</td></tr>
 <tr><td>BaseSize</td><td>Percentage of the tree height before vegetation/branches start (0<BaseSize<1). For a tree with no trunk, BaseSize=0. For a tree where vegetation is only present in the upper half of the tree, BaseSize=0.5. </td></tr>
 <tr><td>Ratio</td><td>Specifies the trunk radius at the base as a fraction of the length of the trunk.  So Ratio=0.01 would have a trunk with radius at base of 1% of the trunk length.</td></tr>
 <tr><td>0Taper</td><td>Reduction factor for trunk radius moving away from base (0<=0Taper<=1).  Setting 0Taper to 0 results in a cylindrical trunk, setting 0Taper to 1 results in a conical trunk, and setting 0Taper between 0 and 1 gives a combination of the two.</td></tr>
 <tr><td>Flare</td><td>Expansion of the trunk radius at the base by a factor of 1+Flare.</td></tr>
 <tr><td>Shape</td><td>Flag corresponding to desired tree crown shape.  See table below for available tree crown shapes.</td></tr>
 <tr><td>BaseSplits</td><td>Number of trunk splits.  For example, BaseSplits=1 gives on split and two distinct "scaffolds" or secondary trunks.  BaseSplits=2 gives three distinct secondary trunk branches.</td></tr>
 <tr><td>BaseSplitSize</td><td>If BaseSplits>0, BaseSplitSize is the distance from the base of the tree to the split as a fraction of the height of the tree (0<=BaseSplitSize<=1).</td></tr>
 <tr><td>0SplitAngle</td><td>Angle from vertical (degrees) of the split branch with respect to vertical.</td></tr>
 </table>

 Creating new tree geometries typically starts by considering the overall size and shape of the tree.  The above image shows a schematic sketch of the relevant parameters used to define these features.

 The height of the tree in meters is given by the `Scale/ScaleV'.  The height of the trunk portion with no branches is given by `BaseSize', which is a fraction of the whole tree height.  For example, if Scale=10 and BaseSize=0.4, the first 4 meters of the tree trunk would have no branches.

 The trunk radius at the base is given as a fraction (Ratio) of the total height of the tree.  For example, Ratio = 0.05 gives a trunk radius that is 5% of the total height of the tree.  The trunk radius can taper along its lenght according to the parameter `0Taper', with 0<=0Taper<=1. 0Taper=0 gives no tapering, and 0Taper=1 tapers the trunk to a point (i.e., radius=0).

 The shape of the tree is given by the ID parameter 'Shape'.  There are 8 supported tree shapes, which are given in the table below.  One important caveat is when <b>BaseSplits</b> is greater than 0, in which case the shape applies to each individual split branch and not necessarily to the tree as a whole.  So BaseSplits=0 and Shape=1 (spherical) would result in one split and two spherical crown sub-shapes.

 <table>
 <caption>Available tree crown shapes</caption>
 <tr><th>Shape</th><th>Description</th><th>Sketch</th></tr>
 <tr><td>0</td><td>Conical</td><td>\image html ShapeConical.png</td></tr>
 <tr><td>1</td><td>Spherical/Ellipsoidal</td><td>\image html ShapeSpherical.png</td></tr>
 <tr><td>2</td><td>Hemispherical</td><td>\image html ShapeHemispherical.png</td></tr>
 <tr><td>3</td><td>Cylindrical</td><td>\image html ShapeCylindrical.png</td></tr>
 <tr><td>4</td><td>Tapered Cylindrical</td><td>\image html ShapeTaperedCylindrical.png</td></tr>
 <tr><td>5</td><td>Flame</td><td>\image html ShapeFlame.png</td></tr>
 <tr><td>6</td><td>Inverse Conical</td><td>\image html ShapeInverseConical.png</td></tr>
 <tr><td>7</td><td>Tend Flame</td><td>\image html ShapeTendFlame.png</td></tr>
 </table>

 \subsection WPTreeR1 Recursive Branches

 \image html "images/Sketch_1Level.jpeg"

 \subsection WPTreeLeaves Leaves

 \image html "images/Sketch_Leaves.jpeg"
	
 \subsubsection WPTreeMask Leaf mask

 The tree model uses a PNG texture mask to visualize leaves.  This is a PNG image of the leaf with a transparent background.  An example leaf mask is given in the image below.  New leaf masks can be created using Gimp fairly easily.  Simply find an image of the leaf, open in Gimp, add an alpha channel to the image, use the `Fuzzy Select Tool' to select the background, then go to Edit->Clear, and export in .png format.  There are many tutorials online describing how to do this in more detail.  Note that the leaf should be oriented as shown in the image below for consistency: petiole pointing to the left.  Also note that the petiole is typically cropped out of the image.

  \subsection WPTgL User-Defined Leaf Angle Distribution Functions

  By default, the Weber-Penn tree model will create a semi-random leaf angle distribution by rotating leaves around its parent branch according to the parameters set for that particular tree. However, this is typically not realistic for how leaves arrange themselves in nature, and it is often desirable to specify a leaf angle distribution based on actual data. A custom leaf angle (inclination) distribution function can be specified for a given tree type in the tree library XML file using the tag '\<LeafAngleDist\> ... \</LeafAngleDist\>'. The elements within the tag should be probability densities of leaf inclination for discrete angle classes ranging from \f$\theta_L=0\f$ to \f$\theta_L=\pi\f$ rad.

  Here is an example: Imagine that we wanted to have N=18 discrete leaf angle bins in our leaf angle PDF \f$g_L\f$. The width of one discrete bin would be \f$\Delta \theta_L=\pi/18\approx 0.1795\f$ rad. Each of the 18 bins of our PDF \f$g_L\f$ should give the probability density that we have a leaf inclination angle that falls within that bin. By definition, the following should hold for our PDF:

  <center>\f$\sum\limits_{i=1}^N\,g_{L,i}\Delta \theta_L=1\f$</center>

  If this condition is not met by the PDF input by the user, the program will ignore it and revert to the default behavior.

As a simple example, imagine we had only one leaf with an inclination of \f$\theta_L=0.1\f$ rad. This leaf would fall in the first discrete bin of \f$g_L\f$, which would have a value of \f$1/\Delta \theta_L\f$ and all other bins would be zero.

For a typical almond tree, the PDF for N=18 is tabulated below. Note that we have the capability to have leaves pointing upward from their base (\f$\theta_L<\pi/2\f$) or leaves pointiing downward from their base (\f$\theta_L>\pi/2\f$). For simplicity, the distribution below considers only upward-facing normals.

  <center>
  <table>
  <caption>Typical leaf angle distribution for almond</caption>
  <tr><th>\f$\theta_L\f$ bin (degrees)</th><th>\f$g_L(\theta_L)\f$</th></tr>
  <tr><td>0-10</td><td>0.229</td></tr>
  <tr><td>10-20</td><td>0.665</td></tr>
  <tr><td>20-30</td><td>0.917</td></tr>
  <tr><td>30-40</td><td>0.945</td></tr>
  <tr><td>40-50</td><td>0.865</td></tr>
  <tr><td>50-60</td><td>0.745</td></tr>
  <tr><td>60-70</td><td>0.619</td></tr>
  <tr><td>70-80</td><td>0.424</td></tr>
  <tr><td>80-90</td><td>0.315</td></tr>
  <tr><td>90-100</td><td>0</td></tr>
  <tr><td>100-110</td><td>0</td></tr>
  <tr><td>110-120</td><td>0</td></tr>
  <tr><td>120-130</td><td>0</td></tr>
  <tr><td>130-140</td><td>0</td></tr>
  <tr><td>140-150</td><td>0</td></tr>
  <tr><td>150-160</td><td>0</td></tr>
  <tr><td>160-170</td><td>0</td></tr>
  <tr><td>180-180</td><td>0</td></tr>
  </table>
  </center>

  This data would be input into the tree library XML file as follows:

  ```
  <?xml version=1.0?>
  <helios>

    <WeberPennTree label="Almond">
      <!--
      Many other parameters here
      -->
      <LeafAngleDist>0.2290 0.6650 0.9170 0.9450 0.8650 0.7450 0.6190 0.4240 0.3100 0 0 0 0 0 0 0 0 0</LeafAngleDist>
    </WeberPennTree>

  </helios>
 ```
  
*/
