/*! \page "SolarPositionDoc" Solar Position Plugin Documentation

  \tableofcontents

 <p> <br><br> </p>

 <table>
 <tr><th>Dependencies</th><td>None.</td></tr>
 <tr><th>CMakeLists.txt</th><td>set( PLUGINS "solarposition" )</td></tr>
 <tr><th>Header File</th><td>#include "SolarPosition.h"</td></tr>
 <tr><th>Class</th><td>\ref SolarPosition</td></tr>
 </table>

 \section SolarIntro Introduction
 
 This plugin calculates the position of the sun, and also implements other models for solar fluxes as well as longwave fluxes from the sky. Model theory and equations are given in the sections below.

 \section SolarConstructor SolarPosition Class Constructor

 <table>
 <tr><th>Constructors</th></tr>
 <tr><td>\ref SolarPosition::SolarPosition( helios::Context* context) "SolarPosition( helios::Context* context)"</td></tr>
 <tr><td>\ref SolarPosition::SolarPosition( float UTC_hrs, float latitude_deg, float longitude_deg, helios::Context* context) "SolarPosition( float UTC_hrs, float latitude_deg, float longitude_deg, helios::Context* context)"</td></tr>
 </table>

 The \ref SolarPosition class can be initialized by simply passing a pointer to the Helios context as an argument to the constructor. This gives the class the model access to the time and date currently set in the Context. The model must also know certain parameters about the simulated location, in particular the offset from UTC time, latitude, and longitude. A description of these parameters are given in the table below. These can be supplied using the second constructor listed in the table above. If the Context is the only argument supplied to the constructor, default values are assumed for UTC, latitude, and longitude (see table below).

 <table>
 <caption>SolarPosition constructor inputs</caption>
 <tr><th>Input Parameter</th><th>Description</th><th>Convention</th><th>Default Behavior</th></tr>
 <tr><td>UTC</td><td>Difference in hours between Coordinated Universal Time (UTC) for a particular location.  See the figure below to determine a particular UTC offset.</td><td>UTC offset value is positive moving West.</td><td>+8:00</td></tr>
 <tr><td>latitude</td><td>Geographic coordinate that specifies the northâ€“south position of a point on the Earth's surface in degrees.</td><td>Latitude is positive in the northern hemisphere.</td><td>+38.55</td></tr>
 <tr><td>longitude</td><td>Geographic coordinate that specifies the east-west position of a point on the Earth's surface in degrees.</td><td>Longitude is positive in the western hemisphere.</td><td>+121.76</td></tr>
 </table>

 \image html "images/1200px-Standard_World_Time_Zones.png"

 \section SolarTheory Model Theory

 \subsection SolarPosTheory Position of the Sun

 The solar position model was implemented following the description in <a href="https://www.sciencedirect.com/science/article/pii/B9780123737502500069">Chapter 1 of Iqbal (1983)</a>.

 The day angle \f$\Gamma\f$ given as the polar angle of the earth relative to the sun (\f$\Gamma=0\f$ on Jan. 1) is calculated as

 <center>
 \f$\Gamma = 2\pi(DOY-1)/365.25\f$,  (1)
 </center>

 where DOY is the <a href="https://en.wikipedia.org/wiki/Julian_day">Julian Day</a> of the year.

 The solar declination angle is then calculated as

 <center>
 \f$\delta = 0.006918 - 0.399912\,\mathrm{cos}(\Gamma) + 0.070257\,\mathrm{sin}(\Gamma)- 0.006758\,\mathrm{cos}(2\Gamma) + 0.000907\,\mathrm{sin}(2\Gamma) - 0.002697\,\mathrm{cos}(3\Gamma) + 0.00148\,\mathrm{sin}(3\Gamma)\f$.         (2)
 </center>

 The <a href="https://en.wikipedia.org/wiki/Equation_of_time">equation of time</a> is calculated as
 
 <center>
 \f$EoT = 229.18(0.000075 + 0.001868\,\mathrm{cos}(\Gamma) - 0.032077\,\mathrm{sin}(\Gamma) - 0.014615\,\mathrm{cos}(2\Gamma) - 0.04089\,\mathrm{sin}(2\Gamma))\f$,         (3)
 </center>

 The hour angle is given by
 
 <center>
 \f$h=15(LST-12)\f$,         (4)
 </center>

 with

 <center>
   \f$LST=hour+minute/60+TC/60\f$,          (5)
 </center>

 and

 <center>
   \f$TC=4(15UTC-longitude)+EoT\f$,         (6)
 </center>

 Finally, the solar elevation angle is given by

 <center>
 \f$\theta_s=\mathrm{sin}^{-1}( \mathrm{sin}(latitude)\mathrm{sin}(\delta) + \mathrm{cos}(latitude)\mathrm{cos}(\delta)\mathrm{cos}(h) )\f$,         (7)
 </center>

 and the solar azimuthal angle is given by

 <center>
 \f$\phi_s=\mathrm{cos}^{-1}( (\mathrm{sin}(\delta) - \mathrm{sin}(\theta_s)\mathrm{sin}(latitude))/(\mathrm{cos}(\theta)\mathrm{cos}(latitude)))\f$.         (8)
 </center>

 Note that \f$\mathrm{cos}^{-1}\f$ gives angles between 0 and \f$\pi\f$, so to get a \f$\phi_s\f$ between 0 and \f$2\pi\f$, we take \f$\phi_s=2\pi-\phi_s\f$ if \f$LST>12\f$.

 \subsection SolarFluxTheory Direct and Diffuse Solar Flux

 Clear-sky solar fluxes are calculated using the 'REST-2' model of <a href="https://www.sciencedirect.com/science/article/pii/S0038092X07000990">Gueymard (2008)</a>. REST-2 is a state-of-the-art atmospheric transmission model that calculates the solar flux at Earth's surface after attenuation by water vapor, CO<sub>2</sub>, Ozone, NO<sub>2</sub>, and aerosols. The model partitions the total radiative flux into direct and diffuse components.

 \subsection LWTheory Ambient Longwave Flux

 The longwave radiation flux emanating from the clear-sky is modeled following <a href="https://rmets.onlinelibrary.wiley.com/doi/full/10.1002/qj.49712253306">Prata (1996)</a>.

 The model surmounts to calculating the effective emissivity of the sky as a function of precipitable water in the atmosphere

 <center>
   \f$\epsilon_s = 1-(1+u)\mathrm{exp}\left(-\left(1.2+3u\right)^{0.5}\right)\f$,
 </center>

 where \f$u\f$ is the wator vapor path length (cm of precipitable water) which can be estimated following <a href="https://journals.ametsoc.org/doi/abs/10.1175/1520-0450(1981)020%3C0003%3ATRBTPW%3E2.0.CO%3B2">Viswanadham (1981)</a> for example.

 The downwelling longwave radiation flux on a horizontal surface is given by

 <center>
   \f$R_L=\epsilon_s\sigma T_a^4\f$,
 </center>

 where \f$\sigma=5.67\times10^{-8}\f$ W/m<sup>2</sup>-K<sup>4</sup>, and \f$T_a\f$ is the air temperature in Kelvin measured near the ground (say 2 m height).
 
 \section SolarLib Using the SolarPosition Plug-in

 \subsection SolarPos Getting the Direction of the Sun

 The direction of the sun can be queried in one of several ways: a Cartesian unit vector pointing in the direction of the sun, a spherical coordinate describing the direction of the sun, the elevation angle of the sun, the zenithal angle of the sun, and the azimuthal angle of the sun.  The functions to query these quantities are given in the table below. Each of these functions calculates the solar direction based on the current time and date set in the Context (see \ref helios::Context::setTime() "setTime()" and \ref helios::Context::setDate() "setDate()"), and the UTC, latitude, and longitude specified in the \ref SolarPosition constructor.

 <table>
 <tr><th>Direction Quantity</th><th>Function</th></tr>
 <tr><td>Unit vector pointing toward the sun.</td><td>\ref SolarPosition::getSunDirectionVector()</td></tr>
 <tr><td>Spherical coordinate vector pointing toward the sun.</td><td>\ref SolarPosition::getSunDirectionSpherical()</td></tr>
 <tr><td>Elevation angle of the sun (radians).</td><td>\ref SolarPosition::getSunElevation()</td></tr>
 <tr><td>Zenithal angle of the sun (radians).</td><td>\ref SolarPosition::getSunZenith()</td></tr>
 <tr><td>Azimuthal angle of the sun (radians).</td><td>\ref SolarPosition::getSunAzimuth()</td></tr>
 </table>

 Below is an example of how to use the \ref SolarPosition mode to calculate the sun angle.

 ~~~~~~
  #include "SolarPosition"

  int main(){
      Context context; //declare the context

      //Set the current time and date
      context.setDate(1,5,2015); //May 1, 2015
      context.setTime(30,12); //12:30

      //Initialize the SolarPosition class
      SolarPosition sun( 7, 31.256, 119.947, &context );

      //Get the sun position
      vec3 direction = sun.getSunDirectionVector(); //unit vector

      float elevation = sun.getSunElevation(); //elevation angle (radians)
      float azimuth = sun.getSunAzimuth(); //azimuthal angle (radians)
      
  }
 ~~~~~~

 \subsection SolarFlux Getting the Solar Flux

 The solar flux can be calculated using the REST-2 model of <a href="https://www.sciencedirect.com/science/article/pii/S0038092X07000990?casa_token=BAJYGez71awAAAAA:CfmA4oT9MLiHGvpD6oUkkDu4EJ1S9uRabZq4-wM07jtcmviZ12jvhD8VVcAkjLWoGNMtg8hDaqo">Gueymard (2008)</a> using the \ref SolarPosition::getSolarFlux() function. IT IS CRITICAL TO NOTE THAT THE CALCULATED FLUX IS FOR A SURFACE PERPENDICULAR TO THE SUN DIRECTION. To get the flux on a horizontal surface, multiply by the cosine of the solar zenith angle.

 Methods are available to get the incoming solar radiation flux perpendicular to the direction of the sun 1) for the entire solar spectrum (\ref SolarPosition::getSolarFlux()), 2) for the PAR band (\ref SolarPosition::getSolarFluxPAR()), and 3) (\ref SolarPosition::getSolarFluxNIR()).

 These functions takes several arguments needed for the model, which are listed in the table below.

 <table>
 <tr><th>Argument</th><th>Description</th><th>Example Value</th></tr>
 <tr><td>pressure</td><td>Atmospheric pressure in Pascals (near the ground).</td><td>101,000 Pa</td></tr>
 <tr><td>temperature</td><td>Air temperature in Kelvin (near the ground).</td><td>300 K</td></tr>
 <tr><td>humidity</td><td>Air relative humidity (near the ground).</td><td>0.6</td></tr>
 <tr><td>turbidity</td><td>Angstrom's aerosol turbidity coefficient.</td><td>0.05</td></tr>
 </table>

 The very similar function \ref SolarPosition::getDiffuseFraction() calculates the fraction of the total flux that is diffuse. The fraction that is direct is simply one minus the diffuse fraction. This function takes the same arguments as \ref SolarPosition::getSolarFlux().

 Example code for using these solar flux functions is given below.

 ~~~~~~
  #include "SolarPosition"

  int main(){
      Context context; //declare the context

      //Set the current time and date
      context.setDate(1,5,2015); //May 1, 2015
      context.setTime(30,12); //12:30

      //Initialize the SolarPosition class
      SolarPosition sun( 7, 31.256, 119.947, &context );

      //Get the sun position
      float zenith = sun.getSunZenith(); //zenithal angle (radians)

      //Calculate solar flux
      float R = sun.getSolarFlux( 101000, 300, 0.6, 0.05 ); //flux perpendicular to sun (W/m^2)
      float R_horiz = R*cos(zenith);  //flux on horizontal surface

      float f_diff = sun.getDiffuseFraction( 101000, 300, 0.6, 0.05 ); //fraction of diffuse radiation

      float R_dir = R*(1.f-f_diff); //direct component of flux (W/m^2)
      
  }
 ~~~~~~

 \subsubsection SolarFluxTurb Calibrating the turbidity using weather station (radiometer) data

 The predicted solar flux may not perfectly match local predicted solar fluxes due to uncertainty in the local turbidity value. There is a built-in routine to calibrate the turbidity based on measured radiative fluxes.

 For the calibration, you must load radiation flux data into a timeseries within the Context. There must be at least one clear-sky day in the timeseries data, and the radiative fluxes must be for the entire solar spectrum in units of W/m<sup>2</sup>. You can then use the \ref SolarPosition::calibrateTurbidityFromTimeseries() method. This method takes one argument, which is a string corresponding to the timeseries variable name containing the radiation flux data.

 \subsubsection SolarFluxClouds Incorporating the effects of clouds

 The REST2 model for solar fluxes was developed for clear-sky conditions and cannot directly be used when clouds are present. If incident solar radiation data is available (e.g., from a weather station), this can be used to calibrate the model to account for the possible presence of clouds. A simple model is described below for doing so.

 Consider \f$R_{meas,h}\f$ to be the measured all-wave incoming solar radiation flux on a horizontal plane (clear or cloudy conditions), and \f$R_{clear}\f$ to be the predicted all-wave incoming solar radiation flux predicted by the REST2 model for clear-sky conditions perpendicular to the direction of the sun. This flux can be projected onto the horizontal plane according to

 \f[
    R_{clear,h} = R_{clear}\mathrm{cos}\,\theta_s.
 \f]

 The diffuse fraction can be approximated as

 \f[
    f_{diff} = 1-\frac{R_{meas,h} - R_{clear,h}}{R_{clear,h}},
 \f]

 where it is enforced that \f$0\leq f_{diff} \leq 1\f$. The resulting flux that is output from the model is (flux perpendicular to the sun)

 \f[
   R_{model} = R_{clear}\frac{R_{meas,h}}{R_{clear,h}}.
 \f]

 In order to enable flux calibration for cloudy conditions, you must 1) Load timeseries data into the Context containing the measured all-wave solar radiation flux. This data must cover the entire period of the simulation. 2) Call \ref SolarPosition::enableCloudCalibration(), which requires a string corresponding to the timeseries data value reference in (1). Below is a code example:

 ~~~~~~
 #include "SolarPosition"

 int main(){
    Context context; //declare the context

    //Load radiation flux timeseries data from CSV file
    //assume that weatherdatafile.txt has columns given in the argument below, and has a mixture of clear-sky and cloudy days
    context.loadTabularTimeseriesData( "/path/to/weatherdatafile.txt", {"Date","Hour","R_tot_Wm2","Tair_C","humidity_rel","Patm_Pa"}, ",", "YYYYMMDD", 1 );

    //Initialize the SolarPosition class
    SolarPosition sun( 7, 31.256, 119.947, &context );

    //Enable cloud calibration
    sun.enableCloudCalibration( "R_tot_Wm2" ); //reference "R_tot_Wm2" data field in timeseries

    //Calibrate the clear-sky turbidity
    float turbidity = sun.calibrateTurbidityFromTimeseries( "R_tot_Wm2" ); //must have some clear-sky days in the weather data

    //Loop over time
    for( int t=0; t<context.getTimeseriesLength(); t++ ){
        context.setCurrentTimeseriesPoint( "R_tot_Wm2", t );

        float Tair_K = context.queryTimeseriesData( "Tair_C" ) + 273;
        float humidity_rel = context.queryTimeseriesData( "humidity_rel" );
        float Patm_Pa = context.queryTimeseriesData( "Patm_Pa" );

        //Calculate solar flux
        float R = sun.getSolarFlux( Patm_Pa, Tair_K, humidity_rel, turbidity ); //flux perpendicular to sun (W/m^2)

        float f_diff = sun.getDiffuseFraction( Patm_Pa, Tair_K, humidity_rel, turbidity ); //fraction of diffuse radiation

        float R_dir = R*(1.f-f_diff); //direct component of flux (W/m^2)
        float R_diff = R*f_diff; //diffuse component of flux (W/m^2)

    }
 }
 ~~~~~~

 An example of the above model applied to actual direct-diffuse partitioned radiation data using a shadowband radiometer is shown below. It should be emphasized that the above model is a relatively simple approximation that produces reasonable fluxes, but more accurate predictions are possible and require much more complicated models.

 \image html "CloudyFluxPartitioning.png"


 \subsection LWFlux Getting the Sky Longwave Flux

 The downwelling longwave radiation flux from the sky can be calculated using the \ref SolarPosition::getAmbientLongwaveFlux() function. This function takes the air temperature and humidity as arguments, which are defined in the same was as for the \ref SolarPosition::getSolarFlux() function described above. The value returned by the function is the clear-sky downwelling longwave radiation flux on a horizontal surface in W/m<sup>2</sup>.

*/
