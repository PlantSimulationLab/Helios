/*! \page "EnergyBalanceDoc" Energy Balance Model Plugin Documentation

 \image html EnergyBalance.jpg

 \tableofcontents

 <p> <br><br> </p>

 <table>
 <tr><th>Dependencies <td>NVIDIA CUDA 9.0+
 <tr><th>CMakeLists.txt <td>set( PLUGINS "energybalance" )
 <tr><th>Header File <td>#include "EnergyBalanceModel.h"
 <tr><th>Class <td>\ref EnergyBalanceModel
 </table>

 \section EBDepends Dependencies

<table>
 <tr>
  <th>Package</th>
  <td>\image html apple-logo.jpg</td>
  <td>\image html unix-logo.png</td>
  <td>\image html windows-logo.jpg</td>
 </tr>
 <tr>
  <td>NVIDIA CUDA 9.0+</td>
  <td>Mac OSX:<br><div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2"><code>$ brew install Caskroom/cask/cuda</code></div></td>
  <td>Use <a href="https://developer.nvidia.com/cuda-downloads">CUDA installer</a></td>
  <td>Use <a href="https://developer.nvidia.com/cuda-downloads">CUDA installer</a></td>
 </tr>
</table>

For help choosing the correct CUDA toolkit version for your system, consult this page: \ref ChoosingCUDA

Useful OS-specific information for installing CUDA can be found here: \ref DependentSoftware

If you are using a PC, it is likely you will need to increase the GPU timeout in the registry, otherwise calculations lasting longer than 2 secs. will timeout and kill your program. A guide on how to increase the timeout can be found here: \ref PCGPUTimeout


\section EBissues Known Issues

 None.

 \section EBIntro Introduction

 This model plugin calculates a local energy balance for every primitive, and ultimately predicts sensible, latent, and longwave fluxes as well as surface temperature. The energy balance equation is solved in parallel on the GPU to accelerate calculations.

 The model is solving the steady-state budget between absorbed radiation, emitted radiation, sensible heat exchange, and latent heat exchange, which is written as

 \f[ R-n_s\varepsilon\sigma T_s^4 = c_p g_H \left( T_s-T_a \right) + \lambda g_M \left(\frac{e_s(T_s)f_s-e_s(T_a)h}{p_{atm}}\right)+C_p\frac{dT_s}{dt}+Q_{other}\f]

 Variables in this equation are listed in this table:

 <table>
 <tr><th>Variable (units)</th><th>Description</th></tr>
 <tr><td>\f$R\f$ (W/m<sup>2</sup>)</td><td>Absorbed all-wave radiation flux (shortwave+longwave).</td></tr>
 <tr><td>\f$T_s\f$ (K)</td><td>Primitive surface temperature.
 <tr><td>\f$T_a\f$ (K)</td><td>Air temperature just outside primitive boundary-layer.</td></tr>
 <tr><td>\f$g_H\f$ (mol air/m<sup>2</sup>-s)</td><td>Conductance to heat from primitive surface to outside of boundary-layer.</td></tr>
 <tr><td>\f$g_S\f$ (mol air/m<sup>2</sup>-s)</td><td>Conductance to moisture between sub-surface air spaces to surface (e.g., for leaves this is stomatal conductance).</td></tr>
 <tr><td>\f$g_M\f$ (mol air/m<sup>2</sup>-s)</td><td>Conductance to moisture from primitive surface to outside of boundary-layer.</td></tr>
 <tr><td>\f$e_s(T)\f$ (Pa)</td><td>Saturation vapor pressure at temperature T. Calculated from Tetens equation (see <a href="https://en.wikipedia.org/wiki/Tetens_equation">en.wikipedia.org/wiki/Tetens_equation</a>)</td></tr>
 <tr><td>\f$f_s\f$</td><td>Relative humidity of air at primitive surface.</td></tr>
 <tr><td>\f$h\f$</td><td>Relative humidity of air outside of boundary-layer.</td></tr>
 <tr><td>\f$p_{atm}\f$ (Pa)</td><td>Atmospheric pressure.</td></tr>
 <tr><td>\f$C_p\f$ (J/m<sup>2</sup>/<sup>o</sup>C)</td><td>Heat capacity of object.</td></tr>
 <tr><td>\f$Q_{other}\f$ (W/m<sup>2</sup>)</td><td>Any surface fluxes other than radiation, convection, or latent (e.g., storage).</td></tr>
 <tr><td>\f$n_s\f$</td><td>Number of primitive faces with heat transfer (e.g., typically \f$n_s=1\f$ for leaves, and \f$n_s=0\f$ for the ground.</td></tr>
 </table>

 Constants are given by:

 <table>
 <tr><th>Constant (units) <th>Value <th>Description</th>
 <tr><td>\f$c_p\f$ (J/mol/K) <td>29.25 <td>Heat capacity of air.
 <tr><td>\f$\lambda\f$ (J/mol) <td>44,000 <td> Latent heat of vaporization of air.
 </table>

 \section EBConstructor EnergyBalanceModel Class Constructor

 <table>
 <tr><th>Constructors
 <tr><td>\ref EnergyBalanceModel::EnergyBalanceModel( helios::Context* context) "EnergyBalanceModel( helios::Context* context)"
 </table>

 The \ref EnergyBalanceModel class is initialized by simply passing a pointer to the Helios context as an argument to the constructor. 

 \section EBData Input/Output Primitive Data
 
 \subsection EBInputData Input Primitive Data

 <table>
 <tr><th>Primitive Data <th>Units <th>Data Type <th>Description <th>Available Plug-ins <th>Default Value
 <tr><td>radiation\_flux\_[*] <td>W/m<sup>2</sup> <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Net absorbed radiation flux for band [*] (e.g., radiation_flux_PAR). <td>Can be computed by \ref RadiationModel plug-in. <td>N/A (must add at least one band)
  <tr><td>wind\_speed <td>m/s <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Air wind speed just outside of primitive boundary-layer. <td>N/A <td>1 m/s
  <tr><td>object\_length <td>m <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Characteristic dimension of object formed by primitive. <td>N/A <td>Square root of primitive surface area
 <tr><td>boundarylayer\_conductance<td>mol air/m<sup>2</sup>-s <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Leaf boundary-layer conductance to heat. <td>\ref BLConductanceModel plug-in <td>Try calculating from model \f$0.135\sqrt{\frac{U}{L}}\f$
 <tr><td>air\_temperature <td>Kelvin <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Ambient air temperature outside of surface boundary layer. <td>N/A <td>300 K
 <tr><td>moisture\_conductance <td>mol air/m<sup>2</sup>-s <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Conductance to moisture between sub-surface air spaces and surface (e.g., for leaves this is stomatal conductance). <td>Can be computed by \ref StomatalConductanceModel plug-in. <td>0
 <tr><td>surface\_humidity <td>unitless <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Relative humidity of air immediately above surface evaporating site. <td>N/A <td>1.0 (saturated)
 <tr><td>air\_humidity <td>unitless <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Ambient air relative humidity outside of surface boundary layer. <td>N/A <td>0.5
 <tr><td>air\_pressure <td>Pascals <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Atmospheric pressure. <td>N/A <td>101,000 Pa
 <tr><td>heat\_capacity <td> J/m<sup>2</sup>/<sup>o</sup>C <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Heat capacity of object. <td>N/A <td>0
 <tr><td>other\_surface\_flux <td>W/m<sup>2</sup> <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Other surface energy fluxes. <td>N/A <td>0
 <tr><td>twosided\_flag <td>N/A</sup> <td>\htmlonly<font face="courier" color="green">uint</font>\endhtmlonly <td>Flag indicating the number of primitive faces with heat transfer (twosided_flag = 0 for one-sided heat transfer; twosided_flag = 1 for two-sided heat transfer). <td>N/A <td>1
 <tr><td>evaporating\_faces <td>N/A</sup> <td>\htmlonly<font face="courier" color="green">uint</font>\endhtmlonly <td>Number of primitive faces from which water is evaporating (must be 1 or 2). Note: if "twosided_flag" is equal to 0, the number of evaporating faces will be automatically set to 1.<td>N/A <td>1  </table>
 
 \subsection EBOutputData Default Output Primitive Data
 
 <table>
 <tr><th>Primitive Data <th>Units <th>Data Type <th>Description
 <tr><td>temperature <td>Kelvin <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Primitive surface temperature.
 <tr><td>sensible\_flux <td>W/m<sup>2</sup> <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Sensible heat flux.
 <tr><td>latent\_flux <td>W/m<sup>2</sup> <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Latent heat flux.
 <tr><td>storage\_flux <td>W/m<sup>2</sup> <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Storage heat flux.
 </table>

 \subsection EBOptionalOutputData Optional Output Primitive Data
 
 <table>
 <tr><th>Primitive Data <th>Units <th>Data Type <th>Description
 <tr><td>boundarylayer\_conductance\_out <td>mol air/m<sup>2</sup>-s <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Primitive boundary-layer conductance calculated by this plug-in.
 <tr><td>vapor\_pressure\_deficit <td>mol/mol <td>\htmlonly<font face="courier" color="green">float</font>\endhtmlonly <td>Surface vapor pressure deficit.
 </table>

 \section EBUse Using the Energy Balance Model Plug-in

 \subsection EBPrimData Input Variables

 Inputs to the model are set by creating primitive variable data in the usual way. If a variable needed for a model input has not been create in the Context, the default value is assumed.

 \subsection EBRad Input Radiative Bands

 In order for the model to calculate the absorbed all-wave radiation flux, it needs to know the names of all radiation bands that were added to the radiation model. This is done using the function \ref EnergyBalanceModel::addRadiationBand() "addRadiationBand()". In the following example, assume we have three radiative wavebands "PAR", "NIR", and "LW".

 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
 <pre><code> \c // Initialize the Model
  %EnergyBalanceModel energybalance(&context);

  energybalance.addRadiationBand("PAR");
  energybalance.addRadiationBand("NIR");
  energybalance.addRadiationBand("LW");</code></pre></div>

 \subsection EBblc Boundary-layer Conductance Model

 The primitive boundary-layer conductance can either be set using the \ref BLConductanceModel plug-in, or using the default model which is the Polhausen equation. Note also that custom conductance values can also be provided by setting the value of primitive data labeled 'boundarylayer_conductance', which overrides the computed model value.

 It is also important to note that, by default, the length scale used to calculate the boundary-layer conductance is taken to be the square root of the primitive surface area. If the size of the object is different from the size of the primitive, then it is important to manually set the length scale to be the size of the object, as this is the relevant scale for boundary-layer development.

 The default boundary-layer conductance is calculated as

 \f$g_H = 0.135 n_s\sqrt{\frac{U}{L}}\f$,

 where \f$U\f$ is the wind speed just outside of the primitive boundary-layer, and \f$L\f$ is the characteristic length/dimension of the object that the primitive belongs to. For a leaf consisting of a single primitive, \f$L\f$ could be assumed to be the length of the primitive. \f$n_s\f$ is the number of primitive faces , which is determined by the value of primitive data "twosided_flag" (twosided\_flag=0 is single-sided and \f$n_s=1\f$, twosided\_flag=1 is two-sided and \f$n_s=2\f$).

 \subsection EBgm Moisture Conductance

 For surfaces that are not completely dry or completely saturated with water, availability of water at the surface determines the rate of moisture transfer from the surface. This is represented by the surface moisture conductance \f$g_S\f$, and corresponds to the conductance between the sub-surface air spaces and the surface.

  For a dry surface, \f$g_S=0\f$ and thus there is no moisture transfer at the surface. For a surface that is saturated with water (e.g., a lake, puddle), \f$g_S\rightarrow\infty\f$ as the supply of water at the surface is theoretically infinite.

  For surfaces such as leaves and the soil in which surface moisture is present but limited, \f$g_S\f$ will have some intermediate value typically on the order of 0.1 mol air/m<sup>2</sup>-s.

  For leaves, \f$g_S\f$ corresponds to the conductance to water vapor between the intercellular (sub-stomatal) air spaces and the surface of the leaf, which we call the stomatal conductance. When stomata are closed, \f$g_S\rightarrow 0\f$, as water transfer is restricted by the stomata.

  For the soil surface, the physical interpretation of \f$g_S\f$ is slightly less intuitive, and corresponds to the rate at which water vapor can diffuse from just below the soil to the surface. This is impacted by the soil texture, and the "tortuosity" of the path water vapor must take through the soil, among other factors.

   Once the water vapor has diffused to the surface, the rate of transfer is then determined by the surface boundary-layer conductance. The sub-surface conductance and boundary-layer conductance act in serial, and can be combined to yield an overall moisture conductance between the sub-surface air spaces and the outside of the boundary layer according to

   \f$g_M = n_e\dfrac{(1.08g_H/n_s)g_S}{1.08g_H/n_s+g_S}\f$,

   where \f$g_H\f$ is the boundary-layer conductance to heat, and \f$1.08g_H\f$ gives the boundary-layer conductance to moisture considering the differences in diffusivity between water vapor and heat. \f$n_e\f$ is the number of evaporating surfaces of the primitive (either 1 or 2), which is set by the primitive data value "evaporating_faces". For leaves, \f$n_e=1\f$ corresponds to hypostomatous leaves (stomata on one side), and \f$n_e=2\f$ to amphistomatous leaves (stomata on both sides).

   It is important to note that if \f$n_s=1\f$, then the value of \f$n_e\f$ will be overridden and also set to 1.

   \subsection EBRun Running the Steady-State Model

   The model is run assuming steady-state conditions (heat storage term is zero) using the \ref EnergyBalanceModel::run() function, which will run the model for all primitives in the Context if no argument is given, or will run the model for a subset of primitives if a vector of UUIDs is given as the argument.

   <table>
      <caption>Functions to run the steady-state energy balance model.</caption>
      <tr><th>Model Run Function <th>Description
      <tr><td>\ref EnergyBalanceModel::run( void ) <td>Run the model for all primitives in the Context.
      <tr><td>\ref EnergyBalanceModel::run( const std::vector<uint> &UUIDs ) <td>Run the model for a select set of primitives in the Context, which are specified by a vector of their UUIDs.
   </table>

   <p> <br><br> </p>

   <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
   <pre><code> #include "EnergyBalanceModel.h"

 int main(void){

    \c// Initialize the Context
    Context context;

    \c// Add `Patch' primitive
    vec3 center = make_vec3(0,0,1);
    vec2 size = make_vec2(1,1);
    uint UUID = context.addPatch( center, size );

    %EnergyBalanceModel energybalance(&context);

    energybalance.addRadiationBand("PAR");
    energybalance.addRadiationBand("NIR");
    energybalance.addRadiationBand("LW");

    energybalance.run();
 }</code></pre></div>

 \subsubsection EBRunUS Unsteady model with heat storage

 Additional functions are available to run the unsteady energy balance model with heat storage. If the timestep argument "dt" is passed with value greater than 0, and the heat capacity \f$C_p\f$ is greater than 0, the unsteady energy balance equation will be applied with the heat storage term included. The equation is discretized in time using a forward Euler scheme in order to solve for the surface temperature at time \f$t+\Delta t\f$

 \f[ T_s(t+\Delta t) = T_s(t)+\left( R-n_s\varepsilon\sigma T_s^4 - c_p g_H \left( T_s-T_a \right) - \lambda g_M \left(\frac{e_s(T_s)f_s-e_s(T_a)h}{p_{atm}}\right)-Q_{other} \right)\frac{\Delta t}{C_p}.\f]

 The timestep should be chosen such that it is significantly smaller than the characteristic time constant of heat storage.

 Functions for running the unsteady energy balance model are listed below.

 <table>
 <caption>Functions to run the unsteady energy balance model.</caption>
 <tr><th>Model Run Function <th>Description
 <tr><td>\ref EnergyBalanceModel::run( float dt ) <td>Run the model for all primitives in the Context and advance in time by dt seconds.
 <tr><td>\ref EnergyBalanceModel::run( const std::vector<uint> &UUIDs, float dt ) <td>Run the model for a select set of primitives in the Context, which are specified by a vector of their UUIDs, and advance in time by dt seconds.
 </table>

 Note that you can run the steady-state model for some primitives but run the unsteady model for others simply by changing the value of the heat capacity primitive data. This is illustrated in the code example below.

 <p> <br><br> </p>

 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
 <pre><code> #include "EnergyBalanceModel.h"

 int main(void){

    \c// Initialize the Context
    Context context;

    \c// Add one `Patch' primitive
    vec3 center = make_vec3(0,0,1);
    vec2 size = make_vec2(1,1);
    uint UUID1 = context.addPatch( center, size );

    \c// Add a second `Patch' primitive
    center = make_vec3(2,0,1);
    uint UUID2 = context.addPatch( center, size );

    \c// Set the heat capacity of the first patch so that the unsteady energy balance model will be run
    float Cp = 10000; //J/m^2-oC
    context.setPrimitiveData( UUID1, "heat_capacity", Cp );

    %EnergyBalanceModel energybalance(&context);

    energybalance.addRadiationBand("PAR");
    energybalance.addRadiationBand("NIR");
    energybalance.addRadiationBand("LW");

    float dt = 180;
    energybalance.run( dt );
 }</code></pre></div>

*/
