/*! \page context_vectors_tutorial Tutorial 1: Helios Vector Types Tutorial

 There are several vector types commonly used in Helios, which are listed in the table below.  These are essentially C++ structures, that contain several data elements and functions to operate on that data.

 One example of these vector types is a vector of three values: \ref helios::vec3.  It contains three elements - x,y,z - and is commonly used to represent 3D coordinates in space.  When working with 3D vectors, there are operations that often need to be performed such as normalizing the vector to unit length, performing a dot product, or adding two vectors.  Thus, there are many built-in functions and operations associated with these vector types.

 In this simple tutorial, we will learn how to work with Helios vector types.

 <table>
   <tr><th>Type</th><th>Description</th><th>Data Fields</th><th>Member Functions</th><th>Creation Function</th></tr>
   <tr><td>\ref helios::vec2 "vec2"</td><td>2D vector of floats</td><td>\ref helios::vec2::x "x", \ref helios::vec2::y "y"</td><td>\ref helios::vec2::normalize() "normalize()", \ref helios::vec2::magnitude() "magnitude()"</td><td>\ref helios::make_vec2() "make_vec2()"</td></tr>
   <tr><td>\ref helios::vec3 "vec3"</td><td>3D vector of floats</td><td>\ref helios::vec3::x "x", \ref helios::vec3::y "y", \ref helios::vec3::z "z"</td><td>\ref helios::vec3::normalize() "normalize()", \ref helios::vec3::magnitude() "magnitude()"</td><td>\ref helios::make_vec3() "make_vec3()"</td></tr>
   <tr><td>\ref helios::vec4 "vec4"</td><td>4D vector of floats</td><td>\ref helios::vec4::x "x", \ref helios::vec4::y "y", \ref helios::vec4::z "z", \ref helios::vec4::w "w"</td><td>none</td><td>\ref helios::make_vec4() "make_vec4()"</td></tr>
   <tr><td>\ref helios::int2 "int2"</td><td>2D vector of integers</td><td>\ref helios::int2::x "x", \ref helios::int2::y "y"</td><td>none</td><td>\ref helios::make_int2() "make_int2()"</td></tr>
   <tr><td>\ref helios::int3 "int3"</td><td>3D vector of integers</td><td>\ref helios::int3::x "x", \ref helios::int3::y "y", \ref helios::int3::z "z"</td><td>none</td><td>\ref helios::make_int3() "make_int3()"</td></tr>
   <tr><td>\ref helios::int4 "int4"</td><td>4D vector of integers</td><td>\ref helios::int4::x "x", \ref helios::int4::y "y", \ref helios::int4::z "z", \ref helios::int4::w "w"</td><td>none</td><td>\ref helios::make_int4() "make_int4()"</td></tr>
   <tr><td>\ref helios::RGBcolor "RGBcolor"</td><td>red-green-blue color code</td><td>\ref helios::RGBcolor::r "r", \ref helios::RGBcolor::g "g", \ref helios::RGBcolor::b "b"</td><td>\ref helios::RGBcolor::scale() "scale()"</td><td>\ref helios::make_RGBcolor() "make_RGBcolor()"</td></tr>
   <tr>	<td>\ref helios::RGBAcolor "RGBAcolor"</td> <td>red-green-blue-alpha color code</td><td>\ref helios::RGBAcolor::r "r", \ref helios::RGBAcolor::g "g", \ref helios::RGBAcolor::b "b", \ref helios::RGBAcolor::a "a"</td><td>\ref helios::RGBAcolor::scale() "scale()", \ref helios::clamp() "clamp()"</td><td>\ref helios::make_RGBAcolor() "make_RGBAcolor()"</td> </tr>
   <tr>	<td>\ref helios::Time "Time"</td><td>Time of day</td><td>\ref helios::Time::second "second", \ref helios::Time::minute "minute", \ref helios::Time::hour "hour"</td><td>none</td><td>\ref helios::make_Time() "make_Time()"</td></tr>
   <tr>	<td>\ref helios::Date "Date"</td><td>Calendar date (MM,DD,YYYY)</td><td>\ref helios::Date::day "day", \ref helios::Date::month "month", \ref helios::Date::year "year"</td><td>\ref helios::Date::JulianDay() "JulianDay()"</td><td>\ref helios::make_Date() "make_Date()"</td></tr>
 </table> 

 \section int3tut Vector of Integers

 Vector types are available for a 2-element (\ref helios::int2 "int2") and 3-element (\ref helios::int3 "int3") vector of integers. An int2 has two elements: x and y, and and int3 has three elements: x, y, and z.  These values of the elements are set using either the \ref helios::make_int2() "make_int2()" or \ref helios::make_int3() "make_int3()" functions.

 In the code example below, we'll make an int3, and set is data values to x=1, y=2, and z=3.

  ~~~~~~{.cpp}
  #include "Context.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names
     
  int main(){

     //Declare our int3, named 'a'
     int3 a;

     //Set the data values
     a = make_int3(1,2,3);

     //Alternatively, we could have initialized data values in the following equivalent ways
     int3 b(1,2,3);
     int3 b = make_int3(1,2,3);

  }
  ~~~~~~

 \section vec3tut Vector of Floats

 Vector types are also available for a 2-element (\ref helios::vec2 "vec2") and 3-element (\ref helios::vec3 "vec3") vector of floats. In addition to the similar elements and creation functions as for integers, we will also demonstrate several built-in functions and operators.

  ~~~~~~{.cpp}
  #include "Context.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names
     
  int main(){

     //Declare our vec3, named 'a' and set its values
     vec3 a = make_vec3(0,0.1,0.2);

     //Declare another vec3, named 'b' and set its values
     vec3 b = make_vec3(1.5,1.4,1.3);

     //Add a and b, and assign it to 'c'
     vec3 c = a + b; //result is c = (1.5,1.5,1.5)

     //Normalize 'c' to have unit length
     c.normalize(); //result is c = (0.577,0.577,0.577)

     //Compute the dot product of a and b, and assign it to 'd'
     float d = a * b; //result is d = 0.4

  }
  ~~~~~~

  \section RGBtut RGB Color Vector

  Colors in an image are typically represented using three channels: red, green, and blue (see <a href="https://en.wikipedia.org/wiki/RGB_color_space">this page</a> for more info).  For a given r-g-b color triple, red, green, and blue values range from 0 to 1.  A value of 0 means that particular channel does not contribute to the overall color, and a value of 1 means that channel fully contributes to the overall color.  For example, (r,g,b)=(0,0,0) produces the color black, (r,g,b)=(1,1,1) produces black, (r,g,b)=(1,0,0) produces red, (r,g,b)=(0,1,0) produces green, etc.  Additionally, an r-g-b-a color value can also be used to specify the transparency of the color, where 'a' is the alpha value.  A value of 'a' = 0 means the color is completely transparent, and 'a' = 1 means it is completely opaque.  For example, (r,g,b,a)=(1,0,0,0.5) would produce a red color that is semi-transparent. Note that defining a color using an r-g-b vector implicitly assumes that 'a' = 1 (opaque).

  The Helios vector type for representing an r-g-b color vector is \ref helios::RGBcolor "RGBcolor", and \ref helios::RGBAcolor "RGBAcolor" is used to represent an r-g-b-a vector. There are several constructors for r-g-b vectors (i.e., ways of initializing).  These are listed in the table below.

  <table>
   <tr><th>RGBcolor Constructor</th><th>RGBAcolor Constructor</th></tr>
   <tr><td>\ref helios::RGBcolor(void) "RGBcolor(void)"</td><td>\ref helios::RGBAcolor(void) "RGBAcolor(void)"</td></tr>
   <tr><td>\ref helios::RGBcolor( float r, float g, float b ) "RGBcolor( float r, float g, float b )"</td><td>\ref helios::RGBAcolor( float r, float g, float b, float a ) "RGBAcolor( float r, float g, float b, float a )"</td></tr>
   <tr><td>\ref helios::RGBcolor( float C[3] ) "RGBcolor( float C[3] )"</td><td>\ref helios::RGBAcolor( float C[4] ) "RGBAcolor( float C[4] )"</td></tr>
   <tr><td>\ref helios::RGBcolor( std::vector<float> C ) "RGBcolor( std::vector<float> C )"</td><td>\ref helios::RGBAcolor( std::vector<float> C ) "RGBAcolor( std::vector<float> C )"</td></tr>
   <tr><td>\ref helios::RGBcolor( helios::vec3 C ) "RGBcolor( helios::vec3 C )"</td><td>N/A</td></tr>
   </table>	

  After an r-g-b vector has already been initialized, channel values are changed using the functions \ref helios::make_RGBcolor() "make_RGBcolor()" and \ref helios::make_RGBAcolor() "make_RGBAcolor()".

  The code below gives several simple examples of using color vectors.

  ~~~~~~{.cpp}
  #include "Context.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names
     
  int main(){

     RGBcolor color(1,0,0); //red color (opaque)
     RGBAcolor color_t(1,0,0,0.5); //red color (semi-transparent)

     color = make_RGBcolor(0,0,1); //change color to blue

  }
  ~~~~~~

  \section Timetut Time Vector

  The vector type \ref helios::Time "Time" is used to represent times of day.  This vector type has three data elements: 'hour' (0-23), 'minute' (0-59), and 'second' (0-59).  These element values are set in the usual way using the \ref helios::make_Time( int hour, int minute, int second ) "make_Time( int hour, int minute, int second )" function. 

  Example code is given below.

  ~~~~~~{.cpp}
  #include "Context.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names
     
  int main(){

     Time time = make_Time(12,30,00); // time of 12:30:00

  }
  ~~~~~~

 \section Datetut Date Vector

 Dates are represented using a similar vector type \ref helios::Date "Date".  This vector type has three data elements: 'day' (1-31), 'month' (1-12), 'year' (YYYY).  These element values are set in the usual way using the \ref helios::make_Date( int day, int month, int year ) "make_Date( int day, int month, int year )" function. 

 It is often convenient to represent dates as a <a href="https://en.wikipedia.org/wiki/Julian_day">Julian day</a> of year.  There is a built-in member function that can compute the Julian day from a Date vector: \ref helios::Date::JulianDay() "Date::JulianDay()".  A Julian Day can also be converted back to a Date vectory using the function \ref helios::Julian2Calendar( int JulianDay, int year ) "Julian2Calendar( int JulianDay, int year )".

  ~~~~~~{.cpp}
  #include "Context.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names
     
  int main(){

     Date date = make_Date(1,1,2000); //Jan 1, 2000

     //Convert to Julian day
     int JD = date.JulianDay();

     //Convert Julian day back to Date
     date = Julian2Calendar( JD, 2000 );

  }
  ~~~~~~
 
*/