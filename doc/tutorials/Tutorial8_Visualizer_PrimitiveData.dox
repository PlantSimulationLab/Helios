/*! \page visualizer_pdata_tutorial Tutorial 8: Visualizing primitive data values

 This tutorial will illustrate how to use the Helios visualizer to visualize primitive data based on a pseudocolor mapping. The code below gives a main.cpp file that loads in a 3D model, sets primitive data for each primitive in the model, and creates a pseudocolor mapping to visualize the primitive data distribution.

 \section Tutorial8_geom Model geometry

 The first step is to declare the Context class in the usual way, then add some geometry to the Context. In this case, we'll load in a 3D model of the well-known <a href="https://en.wikipedia.org/wiki/Stanford_bunny">Stanford Bunny</a> from a <a href="https://en.wikipedia.org/wiki/PLY_(file_format)">PLY file</a>. This file is located in the "PLY" directory found in the base Helios code directory. It is important to either give an absolute path to this file, or a path relative to the build directory. Since this tutorial is build in the directory "Helios/samples/tutorial8/build", the relative path to the PLY file is "../../../PLY/StanfordBunny.ply".

 We can then use the \ref helios::Context::loadPLY() function to load the model. In addition to the relative file path, we need to specify the base (x,y,z) position to place the model, the height to which we want to scale the model, a spherical rotation (if applicable) and the default color of the model primitives. In the example below, we'll place the model at the position (0,0,0), scale it to a height of 2, apply no rotation, and assign a default color of black. Note that if you specify a scaling factor of 0, no scaling will be applied. This function returns a vector of UUIDs, one for each primitive loaded in the model.

 Next, we will specify some primitive data that we'll visualize later. We will create a primitive data called "height" that corresponds to the z-coordinate of each primitive in the 3D model. To do this, we first loop over the UUID vector returned from the \ref helios::Context::loadPLY() function we called previously. For each UUID, we get the vertices of the corresponding primitive. The Stanford Bunny model contains only triangles, so the \ref helios::Context::getPrimitiveVertices() function returns a 3-element vector of vec3's, with each index of the vector corresponding to each of the 3 (x,y,z) vertex coordinates. As a simple approximation, we'll use only the first vertex in the triangle to determine the height of the primitive. Thus, we can index the vertex vector at element 0 to get the (x,y,z) coordinate of the first vertex. Getting the .z member of the vertex coordinate (which has type vec3) gets us the z-coordinate or height.

 Once we have the height of the primitive, we can create and set primitive data called "height" (or whatever name you choose) using the \ref helios::Context::setPrimitiveData().

 \section Tutorial8_vis Visualization

 Finally, we just need to visualize the result. We set up the Visualizer in a similar way as before, but if we add a call to \ref Visualizer::colorContextPrimitivesByData(), it will color the primitives based on a pseudocolor mapping of primitive data values. This means that it will map the data values to colors in a colormap (array of colors) to determine its color. The argument to this function is the name of the primitive data created previously. If the primitive data does not exist for one or more primitives, they will be assigned a value of 0. You can also call this function with an optional argument of a UUID vector, which will only perform the pseudocolor mapping for the primitives referenced in the UUID vector.

 Details of the colormap and colorbar can be modified through a number of functions. Here' we've changed the colormap from the default of "HOT" to "PARULA". Available colormaps are listed in the \ref VisualizerDoc "Visualizer documentation page", as well as how to make custom colormaps. We've also added a title to the colorbar.

  ~~~~~~{.cpp}
  #include "Visualizer.h"

  using namespace helios; //note that we are using the helios namespace so we can omit 'helios::' before names

  int main(){

   Context context;   //Declare the "Context" class

   // Load 3D model "Stanford Bunny" with a base position of (0,0,0) and scaled to a height of 2
   std::vector<uint> UUIDs = context.loadPLY( "../../../PLY/StanfordBunny.ply", make_vec3(0,0,0), 2, nullrotation, RGB::black );

   // Assign primitive data called "height" which gives the primitive z-coordinate
   for( uint UUID : UUIDs ){ //looping over primitive UUIDs
     std::vector<vec3> vertices = context.getPrimitiveVertices(UUID);  //get a vector containing the (x,y,z) position of each primitive vertex
     vec3 vertex = vertices.at(0);  //get the first vertex
     float z = vertex.z;   //get the vertex z-coordinate
     context.setPrimitiveData(UUID,"height",z);  //set this primitive's primitive data "height" equal to the value of "z"
   }

   // Visualize the result
   Visualizer visualizer(800);

   visualizer.buildContextGeometry(&context);

   visualizer.colorContextPrimitivesByData( "height" ); //color primitives based on a pseudocolor mapping of primitive data "height"

   visualizer.setColormap( Visualizer::COLORMAP_PARULA );  //change the colormap to "parula"
   visualizer.setColorbarTitle("Height" ); //give our colorbar a title

   visualizer.plotInteractive();

   return 0;
  }
  ~~~~~~

 The code above should produce the visualization shown below. You can rotate the view using the arrow keys on your keyboard to better view the model.

 \image html images/Tutorial8_bunny.png

*/

